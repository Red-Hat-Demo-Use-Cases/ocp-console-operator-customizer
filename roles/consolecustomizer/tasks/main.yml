---

- name: Get the active skin from ConsoleCustomizer
  kubernetes.core.k8s_info:
    api_version: ocp-console-customizer.dovid/v1alpha1
    kind: ConsoleCustomizerSkin
    name: "{{active_skin}}"
  register: reg_active_skin

- name: Create the console notification
  kubernetes.core.k8s:
    definition:
      apiVersion: console.openshift.io/v1
      kind: ConsoleNotification
      metadata:
        name: '{{ ansible_operator_meta.name }}-occ-banner'
        namespace: '{{ ansible_operator_meta.namespace }}'
      spec:
        text: "{{reg_active_skin.resources[0].spec.title}}"
        color: "{{reg_active_skin.resources[0].spec.textColor}}"
        backgroundColor: "{{reg_active_skin.resources[0].spec.backgroundColor}}"

- name: Create configmap using server side apply
  kubernetes.core.k8s:
    namespace: openshift-config
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: "console-{{active_skin}}-logo"
      binaryData:
        console-custom-logo: "{{reg_active_skin.resources[0].spec.logo}}"
    force: true

- name: Patch the console logo
  kubernetes.core.k8s_json_patch:
    api_version: operator.openshift.io/v1
    kind: Console
    name: cluster
    patch:
      - op: replace
        path: /spec/customization/customLogoFile/name
        value: "console-{{active_skin}}-logo"
      - op: replace
        path: /spec/customization/customLogoFile/key
        value: "console-custom-logo"
    wait: true
    
- name: Sleep for 5 sec, juste to make sure the logo has been transfered into openshift-console namespace custom-logo configmap before bouncing it.
  ansible.builtin.wait_for:
    timeout: 5

- name: Bounce the custoom-logo config map to force the console to refresh cache of the logo (for existing sessions)
  kubernetes.core.k8s:
    state: absent
    namespace: openshift-console
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: "custom-logo"
    force: true
